(1) create database contactdb;
(2) use contactdb;
(3) CREATE TABLE contact (
    	contact_id int(11) NOT NULL AUTO_INCREMENT,
    	name varchar(45) NOT NULL,
    	email varchar(45) not null,
    	address varchar(100) not null,
    	phone varchar(15) not null,
    	PRIMARY KEY (contact_id)
    );
(4) add the dependencies in pom.xml __ <artifactId>s:
	spring-context
	spring-webmvc
	spring-orm
	javax.servlet.jsp-api
	jstl
	mysql-connector-java
(5) create "model" package 
	=> create "Contact" class 
	=> create the constructor + getters/setters
(6) create "dao" package
	=> create "ContactDAO" interface
	=> create methods definitions for {save(), update(), get(), delete(), list()}
	=> create "ContactDAOImpl" class 
		=> implements "ContactDAO" interface
		=> private JdbcTemplate jdbcTemplate;
	
(7) implement "save()" in "ContactDAOImpl" class
	=> create a test class for "ContactDAO" interface
	=> implement "@Test void testSave(){}"
(8) implement "@BeforeEach method(){}" to insert datasource 
	info {driver_class_name, url, suername, pass} 
	before each method {save(), update(), ...etc} 
	instead of repeating the datasource_info code in each method
(9) implement "update()" in "ContactDAOImpl" class
	=> implement "@Test void testUpdate(){}"
(10) implement "get()" in "ContactDAOImpl" class
	=> implement "@Test void testGet(){}"
(11) implement "delete()" in "ContactDAOImpl" class
	=> implement "@Test void testDelete(){}"
(12) implement "list()" in "ContactDAOImpl" class
	=> implement "@Test void testList(){}"
(13) create "config" package
	=> create "WebAppInitializer" class implements WebApplicationInitializer
		=> onStartup(), ApplicationContext, SpringDispatcher
	=> create "SpringMvcConfig" class
		=> @Bean getDataSource()
		=> @Bean getViewResolver()
		=> @Bean getContactDAO()
(14) create "controller" package
	=> create "@Controller MainController"
(15) add <maven.test.skip>true</maven.test.skip> in pom.xml_<properties>
(16)
(17)
(18)
(19)
(20)


















